using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

using NRails;
using Rsdn.Janus;

namespace NRails.Macros
{
  /// <summary>
  /// Description of ModelImpl.
  /// </summary>
  internal module ModelImpl
  {
      public Impl(t : TypeBuilder) : PExpr
      {
          DatabaseManagerImpl.RegisterType(t.Name, t.FullName);
          def engine = Engine.Instance;
          try 
          {
            def table = engine.GetTable(t.Name);
            
            when (table == null)
            {
               Message.Error($"table for type $(t.Name) not found, env: '$(engine.Cfg.Env)'");
            }
            
            foreach (col : TableColumnSchema in table.Columns)
            {
                def clrType = col.Type.ToClrType();
                def fieldMemberName = $"_$(col.Name)";
                t.Define(<[decl: 
                    private mutable $(fieldMemberName : dyn) : $(clrType.Name : dyn); 
                ]>);
                t.Define(<[decl: 
                    [BLToolkit.Mapping.MapField("$(field.Name)")] 
                    public $(col.Name : dyn ) : $(clrType.Name : dyn)
                    {
                        get { $(fieldMemberName : dyn); }
                        set { $(fieldMemberName : dyn) = value; }
                    }
                ]>);
            }
            
            <[ [BLToolkit.DataAccess.TableName($(t.Name : dyn))] ]>
          }
          catch 
          {
             | e => Message.Error($"$(t.Name) model error: $(e.ToString())");
             <[]>
          }
      }
  }
}
