using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

using NRails;
using NRails.Database.Schema;

namespace NRails.Macros
{
  /// <summary>
  /// Description of ModelImpl.
  /// </summary>
  internal module ModelImpl
  {
      public Impl(t : TypeBuilder) : void
      {
          DatabaseManagerImpl.RegisterType(t.Name, t.FullName);
          def engine = try
          {
            Engine.CompileTimeInstance(t.Manager.Options.ProjectPath);
          }
          catch
          {
            | e => Message.Error($"Engine initialization error $e"); throw;
          }
          try 
          {
            def table = engine.GetTable(t.Name);
            
            t.GetModifiers().AddCustomAttribute(<[  BLToolkit.DataAccess.TableName($(table.Name : string)) ]>);
            
            when (table == null)
            {
               Message.Error($"table for type $(t.Name) not found, env: '$(engine.Cfg.Env)'");
            }
            
            foreach (col : TableColumnSchema in table.Columns)
            {
                def clrType = PExpr.FromQualifiedIdentifier(t.Manager, col.Type.ToClrType().FullName);
                def fieldMemberName = $"_$(col.Name)";
                t.Define(<[decl: 
                    private mutable $(fieldMemberName : dyn) : $clrType; 
                ]>);
                t.Define(<[decl: 
                    [BLToolkit.Mapping.MapField($(col.Name : string))] 
                    public $(col.Name : dyn ) : $clrType
                    {
                        get { $(fieldMemberName : dyn); }
                        set { $(fieldMemberName : dyn) = value; }
                    }
                ]>);
            }
          }
          catch 
          {
             | e => Message.Error($"$(t.Name) model error: $(e.ToString())");
          }
      }
  }
}
