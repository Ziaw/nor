using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NRails.Macros
{
  [Record]
  class MyTypeInfo: IComparable[MyTypeInfo]
  {
    [Accessor] name : string; 
    [Accessor] fullName : string; 
    
    public CompareTo(obj : object) : int
    {
        def other = obj :> MyTypeInfo;
        def cmp = Comparer.[string].Default;
        
        match (cmp.Compare(name, other.Name))
        {
            | 0 => cmp.Compare(fullName, other.fullName);
            | x => x
        }
    }
  }

  internal module DatabaseManagerImpl
  {
    mutable static modelTypes : Set[MyTypeInfo];
    
    public RegisterType(name : string, fullName : string) : void
    {
      def info = MyTypeInfo(name, fullName);
      modelTypes = match (modelTypes)
      {
        | null => Set.[MyTypeInfo]([info])
        | x => x.Add(info);
      }
    }
    
    public BeforeInheritance(t : TypeBuilder) : void
    {
      t.Define(<[decl: static engine : NRails.Engine; ]>);
      t.Define(<[decl: public Engine : NRails.Engine { get {engine} }; ]>);
      t.Define(<[decl: static env : string; ]>);
      t.Define(<[decl: public Env : string { get {env} }; ]>);
      t.Define(<[decl:
        static this()
        {
          engine = Engine.Instance;
          env = engine.Cfg.Env;
        }
      ]>);
      t.Define(<[decl:
        public this()
        {
          base(engine.Cfg.ConnectionStringName);
        }
      ]>);
    }
    
    public BeforeTypedMembers(t : TypeBuilder) : void
    {
      foreach (modelType in modelTypes)
      {
        def typeName = modelType.Name;
        def propertyName = $"$(typeName)s";
        def typeFullName = modelType.FullName;
        def modelType = PExpr.FromQualifiedIdentifier(t.Manager, typeFullName);
        
        t.Define(<[decl:
            public $(propertyName : dyn) : BLToolkit.Data.Linq.Table[ $modelType ]
            {
              get { this.GetTable.[$modelType](); }
            }
        ]>);
      }
      modelTypes = null;
    }
  }
}
