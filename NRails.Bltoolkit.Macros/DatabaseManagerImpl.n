using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

namespace NRails.Macros
{
  [Record]
  class MyTypeInfo
  {
    [Accessor] name : string; 
    [Accessor] fullName : string; 
  }

  internal module DatabaseManagerImpl
  {
    mutable static modelTypes : list[MyTypeInfo];
    
    public RegisterType(name : string, fullName : string) : void
    {
      def info = MyTypeInfo(name, fullName);
      modelTypes = match (modelTypes)
      {
        | null => info :: []
        | x => info :: x
      }
    }
    
    public BeforeTypedMembers(t : TypeBuilder, _ : Typer) : void
    {
      def typeNameToExpr(name) {
          match(NString.Split(name, '.')) {
              | [] => <[ () ]>
              | n :: [] => <[ $(n : dyn) ]>
              | n :: ns => ns.FoldLeft(<[ $(n : dyn) ]>, (n, acc) => <[ $acc.$(n : dyn) ]>)
          }
      }

      foreach (modelType in modelTypes)
      {
        def typeName = modelType.Name;
        def propertyName = $"$(typeName)s";
        def typeFullName = modelType.FullName;
        def modelType = typeNameToExpr(typeFullName);
        
        t.Define(<[decl:
            public $(propertyName : dyn) : BLToolkit.Data.Linq.Table[ $modelType ]
            {
              get { this.GetTable.[$modelType](); }
            }
        ]>);
      }
      
      def connStringName = Engine.Instance.Cfg.ConnectionStringName;
      t.Define(<[decl:
        public this()
        {
          base($(connStringName : string))
        }
      ]>
      );            
    }
  }
}
