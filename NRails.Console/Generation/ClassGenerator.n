using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using StringTemplate;
using NRails.Database.Schema;
using System.Text.RegularExpressions;
using NRails.Macros;

[StringTemplateGroup]
public class ClassGenerator
{
    public this()
    {
    }

    public Generate(namespaceName : string, nameMigration : string, usings : list[string], dbSchema : DBSchema) : string
    {
        def tables = dbSchema.Tables.Where(t => t.Name != "SchemaMigrations")
            .OrderBy(t => t, CompareTableSchema()); // not best way to sort tables, but u can always edit generated migration ..

        def tablesAnsColumns = tables.Map(t => {
            def column(col : TableColumnSchema)
            {
                mutable tp = col.Type.DbType.ToString();
                when (col.Nullable)
                    tp = $"$tp?";
                if (col.Size > 0)
                    tp = $"$tp($(col.Size))";
                else
                    when (col.Type.Precision > 0 || col.Type.Precision > 0)
                        tp = $"$tp($(col.Type.Precision), $(col.Type.Scale))";

                def keyPrimary = t.KeyPrimary();
                when (keyPrimary != null && keyPrimary.Columns == col.Name)
                    tp = $"$tp(pk)";

                def defaultKey = t.Keys.Where(t => t.Columns == col.Name && t.KeyType == ConstraintType.Default).SingleOrDefault();
                when (defaultKey != null)
                {
                    def df = regexp match (col.DefaultValue)
                    {
                        | @"^'(?<value>.+)'$" => $"\"$value\""
                        | _ => col.DefaultValue
                    }
                    tp = $"$tp = $df";
                }
                (col.Name, tp)
            }
            
            def key(key : KeySchema)
            {
                (key.Columns, $"$(key.RelTable)")
            }
            
            def columns = t.Columns.Where(c => !t.Keys.Any(k => c.Name == k.Columns && k.KeyType == ConstraintType.KeyForeign)).Map(column);
            def keys = t.Keys.Where(t => t.KeyType == ConstraintType.KeyForeign).Map(key);

            (t.Name, columns, keys)
        });
        def forDrop = tables.ToListRev().Map(_.Name);
        Generate(namespaceName, nameMigration, usings, tablesAnsColumns, forDrop);
    }

    class CompareTableSchema : IComparer[TableSchema]
    {
        public Compare(x : TableSchema, y : TableSchema) : int
        {
            def links(t)
            {
                t.Keys.Where(t => t.KeyType == ConstraintType.KeyForeign).Map(_.RelTable)
            }
            if (links(x).Contains(y.Name))
                1
            else
                if (links(y).Contains(x.Name))
                    -1
                else
                    0
        }
    }

    public Generate(_namespaceName : string, _nameMigration : string, _usings : list[string],
        _tablesColumnsKeys : list[string*list[string*string]*list[string*string]],
        _forDrop : list[string]) : string
    {
    <#..$(_usings; "\n"; GenerateUsing)
            
namespace $_namespaceName
{
    public class $(GetClassname(_nameMigration)) : Migration
    {
        public this () {base("$(GetClassname(_nameMigration))")}

        protected override Up() : void
        {
        ..$(_tablesColumnsKeys; "\n"; CreateTable)
        }

        protected override Down() : void
        {
        ..$(_forDrop; "\n"; DropTable)
        }
    }        
}
#>}

    public GenerateMigration(_namespaceName : string, _nameMigration : string, _usings : list[string]) : string
    {<#..$(_usings; "\n"; GenerateUsing)
            
namespace $_namespaceName
{
    public class $(GetClassname(_nameMigration)) : Migration
    {
        public this () {base("$(GetClassname(_nameMigration))")}

        protected override Up() : void
        {
        }

        protected override Down() : void
        {
        }
    }        
}
#>}

    public GenerateController(_namespaceName : string, _name : string, _usings : list[string]) : string
    {<#..$(_usings; "\n"; GenerateUsing)
            
namespace $_namespaceName.Controllers
{
    [HandleError]
    public class $_name : Controller
    {
        public Index() : ActionResult
        {
        }
    }        
}
#>}

    public GenerateView(_name : string, _usings : list[string]) : string
    {<#<%@ Page Language="Nemerle" MasterPageFile="~/Views/Shared/Site.Master" Inherits="System.Web.Mvc.ViewPage" %>

<asp:Content ID="$(_name)Title" ContentPlaceHolderID="TitleContent" runat="server">
</asp:Content>

<asp:Content ID="$(_name)Content" ContentPlaceHolderID="MainContent" runat="server">
</asp:Content>
#>}

    GenerateUsing(name : string) : string
    {
       $"using $name;"
    }

    CreateColumn(name : string, type_: string) : string
    {
       $"$name : $type_;"
    }

    CreateKey(name : string, type_: string) : string
    {
       $"$name :> $type_;"
    }

    CreateTable(_name : string, _columns : list[string * string], _keys : list[string*string]) : string
    {<#
    create $_name
    {
      ..$(_columns; "\n"; CreateColumn)
      ..$(_keys; "\n"; CreateKey)
    }
#>}

    DropTable(_name : string) : string
    {<#
    drop $_name;
#>}

    GetClassname(name : string) :string
    {
       name.Substring(0,name.Length-2)
    }    
}
