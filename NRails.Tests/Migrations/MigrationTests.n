using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using NRails;
using NRails.Database;
using NRails.Database.Schema;
using NRails.Migrations;
using NRails.Macros.Migration;

namespace NRails.Tests
{
  /// <summary>
  /// Description of MigrationTests.
  /// </summary>
  class MigrationTests: AssertionHelper
  {
      class CreateMigrationTest : MigrationBase
      {
          public Up() : void
          {
              create Test
              {
                  Id : Guid;
                  Zip : string?(len = 10) = "zzzz";
              };
          }
      }

      [Test]
      public CreateTableTest() : void
      {
          CreateTableTest.[CreateMigrationTest](actions =>
          {
              match (actions)
              {
                | [MigrationAction.CreateTable(table, tableActions)] => 
                    Expect(table.Name, Is.EqualTo("Test"));
                    match (tableActions)
                    {
                        | [TableAction.AddColumn(col), TableAction.AddColumn(col2)] => 
                            Expect(col.Name, Is.EqualTo("Id"));
                            Expect(col.Type, Is.EqualTo(ColumnType.Guid));
                            
                            Expect(col2.Name, Is.EqualTo("Zip"));
                            Expect(col2.Type, Is.EqualTo(ColumnType.NCharacterVaring));
                            Expect(col2.Size, Is.EqualTo(10));
                            Expect(col2.Nullable, Is.EqualTo(true));
                            Expect(col2.DefaultValue, Is.EqualTo("zzzz"));
                            
                        | _ => Assert.Fail("2 AddColumn actions expected");
                    }
                | _ => Assert.Fail("Create table action expected");
              }
          });
      }
      
      protected CreateTableTest[T](checkActions : list[MigrationAction] -> void) : void where T : MigrationBase
      {
          def schema = DBSchema();
          def migr = CreateMigrationTest();
          
          def migrService = migr : IMigration;
          migrService.AssignSchema(schema);
          
          migr.Up();
          
          checkActions(migrService.GetActions());
      }
  }
}
