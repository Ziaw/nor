using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using Nemerle.Assertions;
using Nemerle.Extensions;
using NRails.Database.Schema;

namespace NRails.Migrations
{
  public variant MigrationAction
  {
      | CreateTable { table : TableSchema; actions : list[TableAction] }
      | ChangeTable { table : TableSchema; actions : list[TableAction] }
      | RenameTable { table : TableSchema; newName : string }
      | DropTable { table : TableSchema }
  }
  
  public variant TableAction
  {
      | AddColumn { col : TableColumnSchema }
      | ChangeColumn { col : TableColumnSchema; newCol : TableColumnSchema}
      | DropColumn { col : TableColumnSchema }
  }
  
  public interface IActionHolder[T]
  {
      Add(action : T) : void;
      GetActions() : list[T];
      HandlerScope(handler : T -> void) : IDisposable;
  }
  
  public class ActionHolder[T] : IActionHolder[T]
  {
      mutable actionStack : list[T] = [];
      protected mutable actionHandler : T -> void;
      
      class DisposableHelper : IDisposable
      {
          onDispose : void -> void;
          
          public this(onDispose : void -> void)
          {
              this.onDispose = onDispose;
          }
          
          public Dispose() : void
          {
              onDispose();
          }
      }
      
      
      protected AddAction(action : T) : void implements IActionHolder[T].Add
      {
          when (actionHandler != null) actionHandler(action);
          
          actionStack = action :: actionStack;
      }
      
      GetActions() : list[T] implements IActionHolder[T].GetActions
      {
          actionStack.Rev();
      }
      
      HandlerScope(handler : T -> void) : IDisposable  implements IActionHolder[T].HandlerScope
      {
          this.actionHandler = handler;
          DisposableHelper(() => this.actionHandler = null);
      }
  }
  
  public class TableActions : ActionHolder[TableAction]
  {
      #region Helpers
      [Accessor]
      tableSchema : TableSchema;
      
      private GetColumn([NotNull]name : string) : TableColumnSchema
      {
          def col = tableSchema.GetColumn(name);
          when (col == null) throw ArgumentException($"Column '$name' not found in table $(tableSchema.Name)", "name");
          col;          
      }

      public this([NotNull]tableSchema : TableSchema)
      {
          this.tableSchema = tableSchema;
      }
      #endregion
      
      public AddPk([NotNull] colName : string) : void
      {
          // todo: composite key
          def key = KeySchema();
          key.KeyType = ConstraintType.KeyPrimary;
          key.Columns = colName;

          tableSchema.Keys = if (tableSchema.Keys == null)
            array[key]
          else
          {
            def old = SCG.List(tableSchema.Keys);
            old.Add(key);
            old.ToArray();
          }
      }
      
      public Add([NotNull] colAction : TableColumnSchema -> void) : void
      {
          def colSchema = TableColumnSchema();
          
          colAction(colSchema);
          
          AddAction(TableAction.AddColumn(colSchema));
      }

      public Change([NotNull] name : string, [NotNull] colAction : TableColumnSchema -> void) : void
      {
          def oldColumn = GetColumn(name);
          
          def newColumn = oldColumn.Clone();
          
          colAction(newColumn);
          
          AddAction(TableAction.ChangeColumn(oldColumn, newColumn));
      }

      public Drop([NotNull] name : string) : void
      {
          AddAction(TableAction.DropColumn(GetColumn(name)));
      }
  }
  
  public interface IMigration : IActionHolder[MigrationAction]
  {
      AssignSchema(schema : DBSchema) : void;
      Version : string {get};
      Up() : void;
      Down() : void;
  }
  
  public class MigrationBase : ActionHolder[MigrationAction], IMigration
  {
      mutable schema : DBSchema;
      version : string;
      
      protected this([NotNull]version : string)
      {
          this.version = version;
      }

      #region Helpers
      private GetTable([NotNull]name : string) : TableSchema
      {
          AssertSchema();
          
          def table = schema.GetTable(name);
         
          when (table == null) throw ArgumentException($"Table '$name' not found", "name");
          
          table;
      }
      
      private RunActions([NotNull]table : TableSchema, [NotNull]action : TableActions -> void) 
         : (TableSchema * list[TableAction])
      {
          def actions = TableActions(table);

          action(actions);
          
          (table, (actions : IActionHolder[TableAction]).GetActions())
      }
      
      private AssertSchema() : void
      {
          when (schema == null) throw InvalidOperationException("Schema not set");
      }
      #endregion
      
      #region IMigration
      _AssignSchema([NotNull] schema : DBSchema) : void implements IMigration.AssignSchema
      {
          this.schema = schema;
      }
      
      _Up() : void implements IMigration.Up
      {
          Up();
      }

      _Down() : void implements IMigration.Down
      {
          Down();
      }
      
      Version : string implements IMigration.Version
      {
          get {version;}
      }
      #endregion
      
      protected CreateTable([NotNull] name : string, [NotNull] action : TableActions -> void) : void
      {
          def table = TableSchema();
          table.Name = name;
          table.Columns = array[];
          table.Keys = array[];
          table.Indexes = array[];
          
          AddAction(MigrationAction.CreateTable(RunActions(table, action)));
      }

      protected ChangeTable([NotNull] name : string, [NotNull] action : TableActions -> void) : void
      {
          AddAction(MigrationAction.ChangeTable(RunActions(GetTable(name), action)));
      }

      protected RenameTable([NotNull] name : string, [NotNull] newName : string) : void
      {
          AddAction(MigrationAction.RenameTable(GetTable(name), newName));
      }
      
      protected DropTable([NotNull] name : string) : void
      {
          AddAction(MigrationAction.DropTable(GetTable(name)));
      }
      
      protected virtual Up() : void
      {
      }

      protected virtual Down() : void
      {
      }
   }
}
