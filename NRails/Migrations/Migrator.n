using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Data;

using System;
using System.Transactions;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using NRails;
using NRails.Database;
using NRails.Database.Schema;
using BLToolkit.Data;
using BLToolkit.Data.Linq;
using BLToolkit.DataAccess;

namespace NRails.Migrations
{
  public class SchemaMigrations
  {
      mutable public Version : string;
  }
    
  public class Migrator
  {
      public static SchemaMigrations = "SchemaMigrations" : string;
      engine : Engine;
      
      class InitialMigration : MigrationBase
      {
          public this () 
          {
              base("init!");
          }
          
          protected override Up() : void
          {
              this.CreateTable(SchemaMigrations, t => 
              {
                  t.Add(c => 
                  {
                      c.Name = "Version";
                      c.Type = ColumnType.NCharacterVaring;
                      c.Size = 255L;
                      c.Nullable = false;
                  });
                  t.AddPk("Version");
              });
          }
      }
      
      public this(engine : Engine)
      {
          this.engine = engine;
      }
      
      public Migrate(migrs : list[IMigration]) : void
      {
          log("begin migrations");
          def dbDriver = engine.CreateDbDriver();
          def connString = engine.Cfg.ConnectionString.ConnectionString;
          def schemaDriver = dbDriver.CreateSchemaDriver();
          
          unless (schemaDriver.DatabaseExists(connString))
          {
              schemaDriver.CreateDatabase(connString);
              log("database created");
          }
          
          def schema = schemaDriver.LoadExistingSchema(connString);
          log("schema loaded");
          
          def absentMigrations = if (!schema.Tables.Any(t => t.Name == SchemaMigrations))
          {
              InitialMigration() :: migrs.Sort((m, m2) => m.Version.CompareTo(m2.Version))
          }
          else
          {
              def existing = using (conn = schemaDriver.CreateConnection(connString))
              {
                  conn.Open();
                  using (db = DbManager(conn))
                  {
                      db.GetTable.[SchemaMigrations]().Select(sm => sm.Version).ToArray();
                  }
              }
              migrs.Filter(m => !existing.Contains(m.Version)).Sort((m, m2) => m.Version.CompareTo(m2.Version));
          }

          RunMigrationsUp(absentMigrations, schema, schemaDriver, connString);
          log("end migrations");
      }
      
      log(str : string) : void
      {
          def ts()
          {
              def now = DateTime.Now.ToString("hh:mm:ss.fff");
              $"[$now]"
          }
          Console.WriteLine($"$(ts()) $str");
      }
      
      RunMigrationsUp(migrations : list[IMigration], schema : DBSchema, schemaDriver : IDBSchemaDriver, connString : string) : void
      {
          foreach (m in migrations)
          {
              log($"Start migration '$(m.Version)'");
              m.AssignSchema(schema);
              try 
              {
                  using (tx = TransactionScope())
                  using (conn = schemaDriver.CreateConnection(connString))
                  {
                      conn.Open();
                      using (m.HandlerScope(ExecuteAction(conn, schema, schemaDriver, _)))
                      {
                          m.Up();
                      }
                      
                      when (!m.Version.EndsWith("!"))
                          using (db = DbManager(conn))
                          {
                              log($"insert migration info $(m.Version)");
                              def newVersion = SchemaMigrations();
                              newVersion.Version = m.Version;
                              _ = db.Insert(newVersion);
                              log("migration info inserted");
                          }
                      tx.Complete();
                  }
                  log($"Finish migration '$(m.Version)'");
              }
              catch 
              {
                  | _ => throw; // todo: log, show error
              }
          }
      }
      
      ExecuteDdl(conn : IDbConnection, ddl : string) : void
      {
          using (cmd = conn.CreateCommand())
          {
              //cmd.Transaction = trans;
              cmd.CommandText = ddl;
              log($"$ddl");
              _ = cmd.ExecuteNonQuery();
          }
      }
      
      ExecuteAction(conn : IDbConnection, schema : DBSchema, schemaDriver : IDBSchemaDriver, ddlAction : MigrationAction) : void
      {
          def ddlHandler(ddl)
          {
              ExecuteDdl(conn, ddl);
          }
          def processCreate(table, columnActions : list[TableAction]) {
               match (columnActions)
               {
                   | TableAction.AddColumn(col) :: tail => 
                        col :: processCreate(table, tail)
                   | [] => []
                   | _ => throw InvalidOperationException("Only new columns allowed in create table.");
               }
          }

          def processChange(table, columnActions) {
               match (columnActions)
               {
                   | TableAction.AddColumn(col) :: tail => 
                        ddlHandler(schemaDriver.MakeDdlColumnCreate(col, table));
                        processChange(table, tail);
                   | TableAction.ChangeColumn(col, newCol) :: tail =>
                        ddlHandler(schemaDriver.MakeDdlColumnAlter(col, newCol, table));
                        processChange(table, tail);
                   | TableAction.DropColumn(col) :: tail =>
                        
                        when (table.Keys != null)
                            foreach (key in table.Keys.Where(k => k.Columns == col.Name))
		                    {
		                        ddlHandler(schemaDriver.MakeDdlKeyDrop(key, table))
		                    }

                        ddlHandler(schemaDriver.MakeDdlColumnDrop(col, table));
                        processChange(table, tail);
                   | [] => {}
                   | _ => throw InvalidOperationException();
               }
          }
          
          def reload(table)
          {
              _ = schemaDriver.ReloadTableSchema(conn, schema, table);
          }
          
          match (ddlAction)
          {
            |  MigrationAction.CreateTable(table, columns) => 
                table.Columns = processCreate(table, columns).ToArray();
                ddlHandler(schemaDriver.MakeDdlTableCreate(table, true));
                reload(table)
            |  MigrationAction.RenameTable(table, newName) => 
                ddlHandler(schemaDriver.MakeDdlTableRename(table, newName));
                table.Name = newName;
            |  MigrationAction.ChangeTable(table, actions) => 
                _ = processChange(table, actions);
                reload(table)
            |  MigrationAction.DropTable(table) => 
                ddlHandler(schemaDriver.MakeDdlTableDrop(table));
                _= schema.Tables.Remove(table);
          }
      }
  }
}
