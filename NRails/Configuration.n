using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using SCG = System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using System.Xml.XPath;
using System.IO;
using System.Configuration;

namespace NRails
{
  public class Configuration
  {
      static defaultPrefix = "NRails" : string;
      [Accessor] rootPath : string;

      public this(fileName : string)
      {
          rootPath = FileInfo(fileName).Directory.FullName;
          readConfig(fileName);
          readConnectionStrings();
      }
      
      readConnectionStrings() : void
      {
          def checkFile(f)
          {
              match (f)
              {
                | x :: tail => 
                      if (File.Exists(x))
                        x;
                      else
                        checkFile(tail);
                | [] => null
              }
          }
          def acceptedFiles = ["Web.config", "App.config"];
          def configFile = checkFile(acceptedFiles.Map(x => Path.Combine(rootPath, x)));
          
          when (String.IsNullOrEmpty(configFile))
            throw FileNotFoundException($"$acceptedFiles in $rootPath");
          
          readConnectionStrings(configFile);
      }
      
      readConnectionStrings(configFile : string) : void
      {
          // todo: отдельный ридер, надо читать все свойства
          def xdoc = XDocument.Load(configFile);
          def strings = xdoc.XPathSelectElements("//connectionStrings/add")
                .Select(e => (
                        e.Attribute("name").Value, 
                        e.Attribute("connectionString").Value, 
                        e.Attribute("providerName").Value
                    ));
          foreach ((name, str, prov) in strings)
          {
              def setting = ConnectionStringSettings();
              setting.ConnectionString = str;
              setting.ProviderName = prov;
              connectionStrings.Add(name, setting)
          }
      }
      
      readConfig(fileName : string) : void
      {
          // todo: JSON/Yaml reader
          def lineEvaluator = fun (name, val)
          {
            match (name, val)
            {
              | ("env", val) => env = val;
              | ("", _) => {};
              | (x, _) => throw NotSupportedException($"'$x' configuration value is not suported");
            }
          }
          def lineParser = fun (line : string)
          {
              if (line == null || line.Trim() == String.Empty)
                ("", "")
              else
              {
                def splitted = line.Split(':').Select(s => s.Trim()).ToArray();
                (splitted[0], splitted[1])
              }
          }
          using (def reader = StreamReader(fileName))
          {
              mutable line = reader.ReadLine();
              while (line != null)
              {
                  lineEvaluator(lineParser(line));
                  line = reader.ReadLine();
              }
          }
      }
      
      [Accessor]
      mutable env : string;
      
      connectionNames = SCG.Dictionary.[string, string]() : SCG.Dictionary[string, string];

      [Accessor]
      connectionStrings : SCG.Dictionary[string, ConnectionStringSettings] = SCG.Dictionary.[string, ConnectionStringSettings]();
      
      public GetConnectionStringName(env : string) : string
      {
          if (connectionNames.ContainsKey(env))
              connectionNames[env];
          else
          {
              def default = $"$defaultPrefix.$env";
              connectionNames[env] = default;
              default;
          }
      }

      public GetConnectionString(env : string) : ConnectionStringSettings
      {
          def name = GetConnectionStringName(env);
          connectionStrings[name];
      }

      public ConnectionStringName : string
      {
          get {GetConnectionStringName(env);}
      }

      public SetConnectionStringName(env : string, connStr : string) : void
      {
          connectionNames[env] = connStr;
      }
      
      public ConnectionString: ConnectionStringSettings
      {
          get 
          {
              connectionStrings[ConnectionStringName];
          }
      }
  }
}
