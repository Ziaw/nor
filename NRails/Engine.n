using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Rsdn.Janus;
using Rsdn.Janus.Mssql;
using System.IO;

namespace NRails
{
  /// <summary>
  /// Description of Engine.
  /// </summary>
  public class Engine
  {
      [Accessor]
      cfg : Configuration;
      
      public this(cfg : Configuration)
      {
          this.cfg = cfg;
      }
      
      public GetSchema() : DBSchema
      {
          GetSchema(cfg.Env);
      }
      
      mutable cachedSchema : DBSchema;
      public GetSchema(env : string) : DBSchema
      {
          when (cachedSchema == null)
          {
            def connStr = cfg.GetConnectionString(env).ConnectionString;
            // todo: вынести в фабрику
            def db = MssqlDriver();
            def schemaDriver = db.CreateSchemaDriver();
            cachedSchema = schemaDriver.LoadExistingSchema(connStr);
          }

          cachedSchema;
      }

      public GetTable(typeName : string) : TableSchema
      {
          def sch = GetSchema();
          
          sch.Tables.FirstOrDefault(t => t.Name == typeName);
      }
      
      static instance : Engine;
      
      public static Instance : Engine 
      { 
        get 
        { 
          instance;
        }
      }
      
      static defaultConfigLocations : list[string] = ["../../nrails.cfg", "nrails.cfg"];
      static this()
      {
         def location = defaultConfigLocations.FirstOrDefault(f => File.Exists(f));
         
         when (location == null)
             throw FileNotFoundException($"$(defaultConfigLocations) not found in $(Environment.CurrentDirectory)");

         unless (String.IsNullOrEmpty(location))
            instance = Engine(Configuration(location))
      }
  }
}
