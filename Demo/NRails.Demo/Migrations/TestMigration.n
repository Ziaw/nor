using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using NRails.Migrations;
using NRails.Macros.Migration;
using BLToolkit.Data.Linq;
using BLToolkit.Data.DataProvider;

namespace NRails.Demo.Migrations
{
  public class TestMigration : MigrationBase
  {
          public this () {base("000000")}
          
          public class Person 
          { 
            public mutable FirstName : string;
            public mutable LastName : string;
            public mutable Gender : char;
          }
          
          protected override Up() : void
          {
              
             create Person
             {
                 PersonID : int(pk, identity(1, 1));
                 FirstName : string(50);
                 LastName : string(50);
                 MiddleName : string?(50);
                 Gender : char; // todo : длину у char явно указывать не нужно
             }
              
             create Doctor
             {
                 PersonID :> Person(pk); 
                 Taxonomy : string(50);
             }
             
             def tt = sql(db, "insert into Person (FirstName, LastName, Gender) values ('1', '2', 'M')");
             Console.WriteLine($"inserted $tt records");

             def p = Person();
             p.FirstName = "2";
             p.LastName = "3";
             p.Gender = 'F';
             _ = db.Insert(p);
             
             for (mutable i = 1; i < 10; i++)
                insert into Person (FirstName, LastName, Gender) values (i.ToString(), "3", 'F');

             for (mutable i = 1; i < 10; i++)
                _ = sql(db, "insert into Person (FirstName, LastName, Gender) values (?, ?, ?)", $"f$i", $"l$i", 'M');
/*             
            sqlreader ("select $FirstName, $LastName, $(Gender : char) from Person where 1=?", 1)
            {
                Console.WriteLine($"$FirstName $LastName $Gender");
            };
*/            
            
            db.SetCommand("select FirstName, LastName, Gender from Person where 1=@p1", db.Parameter("p1", 1));
            using (reader = db.ExecuteReader())
            while (reader.Read())
            {
                def FirstName = reader.GetString(0);
                def LastName = reader.GetString(1);
                def Gender = reader.GetString(2)[0];
                {
                    Console.WriteLine($"$FirstName $LastName $Gender");
                }
            }
            
                
             _ = db.SetCommand("insert into Person (FirstName, LastName, Gender) values (@p1, @p2, @p3)", 
                db.Parameter("p1", "22"), 
                db.Parameter("p2", "33"), 
                db.Parameter("p3", "M"), 
                );
             _ = db.ExecuteNonQuery();

             create Patient
             {
                 PersonID :> Person;
                 Diagnosis : string(256);
             }

             
/*
CREATE TABLE Person
(
	PersonID   int          NOT NULL IDENTITY(1,1) CONSTRAINT PK_Person PRIMARY KEY CLUSTERED,
	FirstName  nvarchar(50) NOT NULL,
	LastName   nvarchar(50) NOT NULL,
	MiddleName nvarchar(50)     NULL,
	Gender     char(1)      NOT NULL CONSTRAINT CK_Person_Gender CHECK (Gender in ('M', 'F', 'U', 'O'))
)
CREATE TABLE Doctor
(
	PersonID int          NOT NULL
		CONSTRAINT PK_Doctor        PRIMARY KEY CLUSTERED
		CONSTRAINT FK_Doctor_Person FOREIGN KEY
			REFERENCES Person ([PersonID])
			ON UPDATE CASCADE
			ON DELETE CASCADE,
	Taxonomy nvarchar(50) NOT NULL
)
CREATE TABLE Patient
(
	PersonID  int           NOT NULL
		CONSTRAINT PK_Patient        PRIMARY KEY CLUSTERED
		CONSTRAINT FK_Patient_Person FOREIGN KEY
			REFERENCES Person ([PersonID])
			ON UPDATE CASCADE
			ON DELETE CASCADE,
	Diagnosis nvarchar(256) NOT NULL
)
*/              
             
          }
      
  }
}
