using Nemerle.Text;
using Nemerle.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using NRails.Migrations;
using NRails.Macros.Migration;
            
namespace NRails.Demo
{
    public class M20100625034201 : Migration
    {
        public this () {base("M20100625034201")}

        protected override Up() : void
        {
            create DataTypeTest
            {
              DataTypeID : Int(pk, identity(1, 1));
              Binary_ : Binary?(len = 50);
              Boolean_ : Bit?;
              Byte_ : TinyInt?;
              Bytes_ : VarBinary?(len = 50);
              Char_ : Char?(len = 1);
              DateTime_ : DateTime?;
              Decimal_ : Decimal?(precision = 29, seed = 10);
              Double_ : Float?;
              Guid_ : UniqueIdentifier?;
              Int16_ : SmallInt?;
              Int32_ : Int?;
              Int64_ : BigInt?;
              Money_ : Money?(precision = 19, seed = 4);
              SByte_ : SmallInt?;
              Single_ : Real?;
              Stream_ : VarBinary?(len = 50);
              String_ : NVarChar?(len = 50);
              UInt16_ : Int?;
              UInt32_ : BigInt?;
              UInt64_ : Decimal?(precision = 29, seed = 10);
              Xml_ : Xml?;
              
            }
            create Doctor
            {
              PersonID : Int(pk);
              Taxonomy : NVarChar(len = 50);
              
            }
            create Person
            {
              PersonID : Int(pk, identity(1, 1));
              FirstName : NVarChar(len = 50);
              LastName : NVarChar(len = 50);
              MiddleName : NVarChar?(len = 50);
              Gender : Char(len = 1);
              
            }
            create Patient
            {
              Diagnosis : NVarChar(len = 256);
              PersonID :> Person;
            }
            create sysdiagrams
            {
              name : NVarChar(len = 128);
              principal_id : Int;
              diagram_id : Int(pk, identity(1, 1));
              version : Int?;
              definition : VarBinary?(len = 8000);
              
            }
            create Test
            {
              Zap : NVarChar?(len = 10) = "zzzz";
              Street : NVarChar(len = 4000);
              
            }
        }

        protected override Down() : void
        {
            drop Test;
            drop sysdiagrams;
            drop Patient;
            drop Person;
            drop Doctor;
            drop DataTypeTest;
        }
    }        
}