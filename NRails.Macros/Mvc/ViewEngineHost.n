using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using PT = Nemerle.Compiler.Parsetree;

using System;
using System.IO;
using System.Reflection;
using SCG = System.Collections.Generic;
using System.Web.Mvc;
using System.Web.Routing;

namespace NRails.Mvc
{
  internal class ViewEngineHost
  {
    view_engine : VirtualPathProviderViewEngine;

    public this(project_path : string)
    {
        view_engine = ProjectViewEngine(project_path);
    }

    public FindView(controller : string, view : string, master : string) : bool * string
    {
      def ctx = ControllerContext();
      ctx.RouteData = {
        def route_data = RouteData();
        route_data.Values.Add("controller", controller);
        route_data
      };

      def result = view_engine.FindView(ctx, view, master, false);
      match(result.View) {
        | null => (false, "")
        | view is WebFormView => (true, view.ViewPath)
        | _ => (true, view)
      }
    }
  }
  
  internal class ProjectViewEngine : WebFormViewEngine
  {
    project_path : string;
    
    public this(project_path : string)
    {
      this.project_path = project_path;
      ViewLocationCache = DefaultViewLocationCache.Null;
    }

    protected override FileExists(_controllerContext : ControllerContext, virtualPath : string) : bool
    {
      def path = regexp match(virtualPath) {
        | @"~/(?<path>.*)" => path
        | _ => virtualPath
      }
      def full_path = Path.Combine(project_path, path);
      File.Exists(full_path)
    }
  }
}
