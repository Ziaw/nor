using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;

using System;
using System.Collections.Generic;
using System.Linq;

using NRails.Migrations;

namespace NRails.Macros.Migration
{
  module MigrationImpl
  {
      public Create(_ : Typer, name : PExpr, code : PExpr) : PExpr
      {
          def t = <[ $("t" : usesite) ]>;
          def c = <[ $("c" : usesite) ]>;
          
          <[
            this.CreateTable($(name.ToString() : string), $t => 
            {
                $(CompileColumns(t, c, code))
            });
          ]>
      }

      public Change(_ : Typer, name : PExpr, code : PExpr) : PExpr
      {
          // todo: возможность не указывать тип поля, например:
          // Id : same(len = 20)
          def c = <[ $("c" : usesite) ]>;
          def t = <[ $("t" : usesite) ]>;
          
          
          <[
            this.ChangeTable($(name.ToString() : string), $t => 
            {
                $(CompileColumns(t, c, code))
            });
          ]>
      }
      
      CompileColumns(t : PExpr.Ref, c : PExpr.Ref, code : PExpr) : PExpr
      {
          mutable colNames = Set.[string]();
          
          def compile(s : PExpr) : PExpr
          {
            match (s)          
            {
                | <[ $name : $type_]> with defExpr = null
                | <[ $name : $type_ = $defExpr]> => 
                  if (colNames.Contains(name.ToString()))
                  {
                      Message.Error(name.loc, $"Duplicate column '$name'");
                      <[]>
                  }
                  else
                  {
                      colNames = colNames.Add(name.ToString());
                      CompileColumn(t, c, name, type_, defExpr);
                  }

                | x => 
                    Message.Error(x.loc, $"Ivalid field definition $x");
                    <[]>;
            }
          }
          match (code)
          {
              | PExpr.Sequence(seq) => PExpr.Sequence(seq.Map(compile))
              | x => compile(x);
          }
      }

      CompileColumn(t : PExpr.Ref, c : PExpr.Ref, name : PExpr, type_ : PExpr, defExpr : PExpr) : PExpr
      {
          mutable body = [<[ $c.Name = $(name.ToString() : string);]>];
          
          def Add(p)
          {
              body = p :: body;
          }
          
          def compileParm(parm : PExpr)
          {
              match (parm)
              {
                  | <[ Size = $(number : int)]> 
                  | <[ len = $(number : int)]> 
                  | <[ length = $(number : int)]> 
                  | <[ size = $(number : int)]> => Add(<[ $c.Size = $(number : long); ]>)
                  
                  | <[ $x = $_ ]> 
                  | x => Message.Error(x.loc, $"Invalid param '$x'")
              }
          }
          
          match (type_)
          {
            | <[ $typeName?(..$parms) ]> with isNullable = true
            | <[ $typeName(..$parms) ]> with isNullable = false
            | <[ $typeName? ]> with (parms = [], isNullable = true)
            | <[ $typeName ]> with (parms = [], isNullable = false) => 
                def strType = typeName.ToString();
                
                def columnType = MigrationUtils.ColumnTypeFromString(strType);
                
                if (columnType.HasValue)
                {
                    parms.Iter(compileParm);
                    Add(<[ $c.Type = NRails.Database.Schema.ColumnType.$(columnType.Value.ToString() : usesite); ]>);
                    
                    when (isNullable)
                        Add(<[ $c.Nullable = true; ]>);
                }
                else
                {
                    Message.Error(typeName.loc, "Invalid type name");
                }
          }
          
          match (defExpr)
          {
              | null => {}
              // todo: надо разобраться как вычислять выражения типа даты
              // и преобразовывать их в нужный сиквельный эквиваент
              | <[ $(x : int) ]> => Add(<[ $c.DefaultValue = $(x.ToString() : string); ]>);
              | <[ $(x : string) ]> => Add(<[ $c.DefaultValue = $(x : string); ]>);
              | <[ $x ]> => Message.Error(x.loc, "Only string or int default value supported.");
          }
          
          <[ 
              $t.Add($c => {
                  ..$body
              });
          ]>;
      }
  }
}
