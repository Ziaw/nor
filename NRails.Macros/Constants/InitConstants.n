using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Logging;
using Nemerle.Imperative;
using System;
using System.Collections.Generic;
using System.Linq;

namespace NRails.Macros
{
  module InitConstants
  {
    mutable nrHost : TypeBuilder;
    
    public Init(t : Typer, manager: ManagerClass, phase : Phase) : void
    {
       def nss = manager.CoreEnv.NameTree.NamespaceTree;

       nrHost = match(phase, nrHost) 
       {
           | (_, null)
           | (Phase.BeforeInheritance, _) => 
               manager.CoreEnv.Define(<[decl:
                public module NC
                {
                }
               ]>)
           | _ => nrHost;
       }
       
       foreach (tb in nss.GetTypeBuilders())
       {
           when (tb.FullName.EndsWith("Controller"))
              ProcessController(phase, tb, nrHost);
       }
       
       when (phase == Phase.WithTypedMembers)
       {
         nrHost.Compile();
         nrHost = null
       }
    }

    ProcessController(phase : Phase, tb : TypeBuilder, nr : TypeBuilder) : void
    {
        match (phase)
        {
            | Phase.WithTypedMembers => 
                def name = tb.Name;
                
                def myType = nr.DefineNestedType(<[decl: 
                    public module $(name : dyn) 
                    {
                    }
                ]>);
                
                
                def methods = tb.GetMethods()
                    .Filter(m => m.ReturnType.GetSystemType().Name == "ActionResult")
                    .Map(m => 
                    {
                        def name = m.Name;
                        <[decl:
                            public static $(name : dyn)() : string 
                            {
                                $(name : string)
                            }
                        ]>
                    });
                foreach (method in methods)
                    myType.Define(method);
               
                myType.Compile();
            | _ => ()
        }
    }
  }
}
