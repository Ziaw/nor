using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nemerle.Assertions;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Logging;
using Nemerle.Imperative;
using System;
using System.Collections.Generic;
using System.Linq;

namespace NRails.Macros
{
  module InitConstants
  {
    public Init(_ : Typer, manager: ManagerClass, phase : Phase) : void
    {
       def nss = manager.CoreEnv.NameTree.NamespaceTree;

       foreach (tb in nss.GetTypeBuilders())
       {
           when (tb.FullName.EndsWith("Controller"))
              ProcessController(phase, tb, manager);
       }
    }
    
    ProcessController(phase : Phase, tb : TypeBuilder, manager : ManagerClass) : void
    {
        def name = tb.Name + "_test";
        match (phase)
        {
            | Phase.BeforeInheritance => 
                def tb = manager.CoreEnv.Define(<[
                    decl: public class $(name : dyn) {
                        public static Test = "1" : string;
                    }
                ]>);
                tb.Compile();
            | _ => ()
        }
    }

  }
}
